const _validateFails = option => {
  throw new Error(`Invalid database option: ${option}`)
}

const _validateDatabase = database => {
  if (!database) {
    _validateFails('no "options.credentials.database" provided')
  }
}

const _validatePool = options => {
  if (!isNaN(options.pool.min) && !isNaN(options.pool.max) && options.pool.min > options.pool.max) {
    _validateFails('"options.pool.min" is bigger than "options.pool.max"')
  }
}

/**
 * Validates the connect and pool options and adds defaults if not given.
 * @param {Object} [options] - The db connection options.
 * @param {Object} [options.credentials] - The db connection options.
 * @param {Object} [options.credentials.database] - Alias for url.
 * @param {Object} [options.pool] - The min and max pool options.
 * @param {number} [options.pool.min] - The minimum number of db connection clients.
 * @param {number} [options.pool.max] - The maximum number of db connection clients.
 * @param {number} [options.pool.evictionRunIntervalMillis] - How often to run eviction checks.
 * @param {number} [options.pool.idleTimeoutMillisForPools] - The time interval in ms until an idle pool is evicted.
 * @throws Error if one of the options is invalid or missing
 */
const options = options => {
  options.credentials = options.credentials || {}
  options.credentials.database =
    options.credentials.database || options.database || options.host || options.url || options.credentials.url

  _validatePool(options)

  options.pool.min = 1
  options.pool.max = 1
  options.pool.evictionRunIntervalMillis = 0
  options.pool.idleTimeoutMillisForPools = 0

  _validateDatabase(options.credentials.database)
}

module.exports = options
