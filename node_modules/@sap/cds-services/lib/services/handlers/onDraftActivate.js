const { setStatusCodeAndHeader, getEntityName, ensureNoDraftsSuffix } = require('../utils/draftUtils')
const { getKeyData } = require('../utils/draftWhereUtils')
const { checkIntegrity } = require('../utils/handlerUtils')
const { resolveCqnIfView } = require('../utils/defaultHandlers')

const _adaptResult = result => {
  result.IsActiveEntity = true
  result.HasActiveEntity = false
  result.HasDraftEntity = false
  delete result.DraftAdministrativeData_DraftUUID

  return result
}

const _getKeysObj = context => {
  let keysObj = {}

  if (context.query.UPDATE) {
    keysObj = getKeyData(Object.keys(context.target.keys), context.query.UPDATE.where)
  }

  if (context.query.INSERT) {
    for (const key in context.query.INSERT.entries[0]) {
      if (Object.keys(context.target.keys).includes(key)) {
        keysObj[key] = context.query.INSERT.entries[0][key]
      }
    }
  }
  return keysObj
}

/**
 * Generic Handler for ActivationAction requests.
 * In case of success it returns the prepared draft entry.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDraftActivate
 */
const onDraftActivate = () => async context => {
  await context.run(resolveCqnIfView(context))

  await checkIntegrity(context)

  setStatusCodeAndHeader(
    context._.odataRes,
    _getKeysObj(context),
    getEntityName(ensureNoDraftsSuffix(context.target.name)),
    true
  )
  return _adaptResult(Object.assign({}, context.data))
}

module.exports = onDraftActivate
